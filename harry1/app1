from flask import Flask, render_template, url_for, request, redirect
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///my_test.db"
#app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False   => use only when error comes
#with app.app_context():
db = SQLAlchemy(app)

class My_test(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(50), nullable=False)
    address = db.Column(db.String(500), nullable=False)
    date_created = db.Column(db.DateTime, default=datetime.utcnow)

    #def __repr__(self) -> str:
        #return f"{self.id} - {self.content} - {self.address}"

# @app.route('/')
# def hello_world():
#     my_test = My_test(srno="01", name="gauree", address="thane, mumbai")
#     db.session.add(my_test)
#     db.session.commit()
#     return render_template("base.html")
    #return render_template("index1.html")
    #return render_template("index.html")
    #return 'Hello, World!'

@app.route('/', methods=["POST", "GET"])
def base():
    if request.method == "POST":
        task_content = request.form["content"]
        new_task = My_test(content=task_content)

        try:
            db.session.add(new_task)
            db.session.commit()
            return redirect("/")

        except:
            return "issue adding task"

    else:
        tasks=My_test.query.order_by(My_test.date_created).all()   #all() or first()
        return render_template("base.html", tasks=tasks)

# @app.route('/show')
# def show():
#     all_test = My_test.query.all()
#     print(all_test)
#     return 'this is show'

@app.route('/about')
def about():
    return 'this is about flask'

if __name__=="__main__":
    app.run(debug=True)      # app run in debug mode [python app.py]